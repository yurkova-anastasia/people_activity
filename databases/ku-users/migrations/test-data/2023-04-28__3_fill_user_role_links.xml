<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog https://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="1" author="anastasia.yurkova2003@gmail.com">
        <sql>
            WITH series AS (
             SELECT generate_series(1, 100) AS sery
            )
            INSERT INTO user_role_links(active,inserted_date_at_utc, user_id, role_id)
            SELECT
                FALSE,
                '2022-01-01 00:00:00.000'::TIMESTAMP + (FLOOR(RANDOM() * 30) + 1)::INTEGER * INTERVAL '1 day' +
                (FLOOR(RANDOM() * 24))::INTEGER * INTERVAL '1 hour' +
                (FLOOR(RANDOM() * 60))::INTEGER * INTERVAL '1 minute' +
                (FLOOR(RANDOM() * 60))::INTEGER * INTERVAL '1 second',
                s.sery,
                CASE
                    WHEN s.sery % 2 = 0 THEN 2
                    ELSE 1
                END
            FROM series s;

            WITH series2 AS (
            SELECT generate_series(1, 5) AS sery2
            )
            INSERT INTO user_role_links(active,inserted_date_at_utc, user_id, role_id)
            SELECT
                FALSE,
                '2022-01-01 00:00:00.000'::TIMESTAMP + (FLOOR(RANDOM() * 30) + 1)::INTEGER * INTERVAL '7 day' +
                (FLOOR(RANDOM() * 24))::INTEGER * INTERVAL '1 hour' +
                (FLOOR(RANDOM() * 60))::INTEGER * INTERVAL '1 minute' +
                (FLOOR(RANDOM() * 60))::INTEGER * INTERVAL '1 second',
                s2.sery2,
                CASE
                    WHEN s2.sery2 % 2 = 0 THEN 1
                    ELSE 2
                END
            FROM series2 s2
        </sql>
    </changeSet>

    <changeSet id="2" author="anastasia.yurkova2003@gmail.com">
        <sql>
            UPDATE user_role_links curr
            SET updated_date_at_utc = prev.inserted_date_at_utc
            FROM (
                SELECT id, user_id, role_id, inserted_date_at_utc,
                    LEAD(inserted_date_at_utc) OVER (PARTITION BY user_id ORDER BY inserted_date_at_utc DESC)
                FROM user_role_links
                WHERE active = FALSE
            ) prev
            WHERE curr.user_id = prev.user_id
        </sql>
    </changeSet>

    <changeSet id="3" author="anastasia.yurkova2003@gmail.com">
        <sql>
            UPDATE user_role_links AS u
            SET active = TRUE, updated_date_at_utc = NULL
            WHERE (u.user_id, u.inserted_date_at_utc) IN (
                SELECT user_id, MAX(inserted_date_at_utc) AS latest_inserted_date
                FROM user_role_links
                WHERE active = FALSE
                GROUP BY user_id
            )
        </sql>
    </changeSet>
</databaseChangeLog>

